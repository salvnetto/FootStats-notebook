---
title: "Modelagem de Gols em Partidas de Futebol"
format: 
  revealjs:
    embed-resources: true
    theme: fabio.scss
    slide-number: c/t
    code-line-numbers: true
    incremental: false
    transition: fade
    progress: true
    background-transition: fade
    transition-speed: slow
callout-appearance: simple
---

```{r setup}
#| output: false
#| echo: false
#| warning: false

rm(list=ls())

library(tidyverse)
library(cmdstanr)
library(kableExtra)
library(bayesplot)
library(caret)
library(posterior)
library(ggrepel)
library(flextable)

options(mc.cores = parallel::detectCores())
```

```{r load df}
#| output: false
#| echo: false
#| warning: false

df_train = read.csv("df_train.csv")
df_test = read.csv("df_test.csv")

df = rbind(df_train, df_test) %>% 
  select(-X)
```

```{r load stan}
#| output: false
#| echo: false
#| warning: false

fit1 = readRDS("results/poisson.rds")
fit2 = readRDS("results/dynamic_poisson.rds")
```

```{r predict_game function}
#| output: false
#| echo: false
#| warning: false

predict_game = function(game_index, possible_values, samples){
  x = draws_of(samples$gf_new)[, game_index]
  y = draws_of(samples$ga_new)[, game_index]

  prob_matrix = matrix(0, nrow = length(possible_values), ncol = length(possible_values))
  
  for (i in possible_values) {
    for (j in possible_values) {
      joint_count = sum(x == i & y == j)
      prob_matrix[i + 1, j + 1] = joint_count / length(x)
    }
  }
  
  rownames(prob_matrix) = possible_values
  colnames(prob_matrix) = possible_values
  
  return(round(prob_matrix*100, 1))
}
```

```{r predict_league function}
#| output: false
#| echo: false
#| warning: false

predict_league = function(new_data, samples){
  new_data$home_win = NA
  new_data$draw = NA
  new_data$home_lost = NA
  
  for(i in 1:nrow(new_data)){
    x = draws_of(samples$gf_new)[, i]
    y = draws_of(samples$ga_new)[, i]
    n_preds = draws_of(samples$gf_new)[ ,i]
    
    new_data[i, ]$home_win = sum(x > y)/length(n_preds)
    new_data[i, ]$draw = sum(x == y)/length(n_preds)
    new_data[i, ]$home_lost = sum(x < y)/length(n_preds)
  }
  
  predicted_games = new_data %>% 
    mutate(
      result_predicted = case_when(
         home_win >= draw & home_win >= home_lost ~ 'W',  # WIN
         draw >= home_win & draw >= home_lost ~ 'D', # DRAW
         TRUE ~ 'L'  # LOSE
       ),
      sucess = if_else(result_predicted == result, 1, 0),
      
      favorite_actual = ifelse(result %in% c("W", "D"), "Favorite", "Underdog"),
      favorite_predicted = case_when(
        home_win + draw >= home_lost ~ "Favorite",
        home_lost >= home_win + draw ~ "Underdog"
        ),
      
      odds_win = home_win/(1-home_win),
      odds_draw = draw/(1-draw),
      odds_lose = home_lost/(1-home_lost)
      )
  
  return(predicted_games)
}
```

# Dados

Brasileirão Série A

-   **Temporada:** 2024
-   **Equipes:** 20
-   **Rodadas:** 38
-   **Jogos:** 380

Divido em Treino e Teste:

-   **Treino:** Rodadas 1 a 34 (340 jogos)
-   **Teste:** Rodadas 35 a 38 (40 jogos)



## Dados

```{r table overview}
#| output: true
#| echo: false
#| warning: false

df_table = df %>% 
  mutate("Placar" = paste0(df$gf, " - ", df$ga)) %>% 
  arrange(round) %>% 
  mutate(Jogo = row_number()) %>% 
  select("Jogo" = Jogo,
         "Index Mandante" = team_name_index,
         "Mandante" = team_name,
         "Placar" = `Placar`,
         "Visitante" = opponent,
         "Index Visitante" = opponent_index,
         ) %>% 
  mutate_all(as.character)
  
first_rows = head(df_table, 3)
last_rows = tail(df_table, 3)
ellipsis_row = data.frame(
  Jogo = "...",
  "Index Mandante" = "...",
  Mandante = "...",
  Placar = "...",
  Visitante = "...",
  "Index Visitante" = "..."
)

colnames(ellipsis_row) = colnames(df_table)

combined_df = bind_rows(first_rows, ellipsis_row, last_rows)
  
kable(combined_df)
```



## Dados

```{r distribuition of data}
#| output: true
#| echo: false
#| warning: false

df %>% 
  select("Gols mandante" = gf,
         "Gols visitante" = ga) %>% 
  pivot_longer(cols = c(`Gols mandante`, `Gols visitante`),
               names_to = "gols") %>% 
  ggplot(aes(x = value)) +
    geom_bar(fill = "#004d8eff", color = "#0b5394ff") +
    labs(
      title = "Distribuição dos Gols",
      x = "Número de gols",
      y = "Frequência"
    ) +
    theme_minimal() +
    facet_grid(~gols)
```

```{r mean and var of data}
#| output: true
#| echo: false
#| warning: false


medias_var = t(matrix(
  c(round(mean(df$gf, na.rm = TRUE),2), 
    round(var(df$gf, na.rm = TRUE), 2),
    round(mean(df$ga, na.rm = TRUE), 2), 
    round(var(df$ga, na.rm = TRUE), 2)), 
  nrow = 2, 
  ncol = 2,
  dimnames = list(
    c("Média", "Variância"), 
    c("Gols mandante", "Gols visitante")
  )
))

kbl(medias_var)
```

# Modelo 1: Estático

## Modelagem

Em uma partida entre as equipes $i$ (mandante) e $j$ (visitante):

- $X_{i,j}$: Gols da equipe $i$ na equipe $j$.
- $Y_{j,i}$: Gols da equipe $j$ na equipe $i$.


Os gols seguem distribuições Poisson independentes: 

$$
X_{i,j} \mid \theta \sim \text{Poisson}(\theta_{i,j}) \\
Y_{j,i} \mid \theta \sim \text{Poisson}(\theta_{j,i})
$$

Com taxa esperada de gols: 

$$\log(\theta_{i,j}) = att_i - def_j + home_i \\
\log(\theta_{j,i}) = att_j - def_i$$

- $att$: Fator de ataque.
- $def$: Fator de defesa.
- $home$: Vantagem de jogar em casa.



## Modelagem

Para cada time $(t = 1,...,T)$, temos como priori:

$$ att_t \sim \text{Normal}(0, 1000), \quad def_t \sim \text{Normal}(0, 1000), \quad home_t \sim \text{Normal}(0, 1000) $$

Para evitar problemas de identificabilidade adicionamos as restrições: 

$$\sum_{t=1}^{T} att_t = 0 \quad \sum_{t=1}^{T} def_t = 0, \quad \sum_{t=1}^{T} home_t = 0$$

Nosso vetor $\theta$ contém ao todo 60 parâmetros:

$$\theta = (att_{1}, ..., att_{T}, def_{1}, ..., def_{T}, home_{1}, ..., home_{T})$$



## Convergência

Foram executadas 15000 iterações, sendo 5000 "burn-in".

```{r traceplot}
#| output: true
#| echo: false
#| warning: false

draws = posterior::as_draws_rvars(fit1$draws())

p1 = mcmc_trace(draws, pars = c("att[1]")) + ylab("Att Botafogo")
p2 = mcmc_trace(draws, pars = c("def[2]")) + ylab("Def Palmeiras")
p3 = mcmc_trace(draws, pars = c("home[1]")) + ylab("Home Botafogo")
p4 = mcmc_trace(draws, pars = c("home[2]")) + ylab("Home Palmeiras")

bayesplot_grid(plots = list(p1, p2, p3, p4))
```



## Convergência

```{r rhat and neff}
#| output: true
#| echo: false
#| warning: false

rhats = bayesplot::rhat(fit1)
ratios_cp = neff_ratio(fit1)

prhat = mcmc_rhat_hist(rhats)
pnepp = mcmc_neff_hist(ratios_cp)


bayesplot_grid(plots = list(prhat, pnepp))
```



## Convergência

```{r acf}
#| output: true
#| echo: false
#| warning: false

pacf1 = mcmc_acf(draws, pars = c("att[1]")) + ylab("Att Botafogo")
pacf2 = mcmc_acf(draws, pars = c("def[2]")) + ylab("Def Palmeiras")

bayesplot_grid(plots = list(pacf1, pacf2),
               grid_args = list(nrow = 1, ncol = 2))
```
## Inferência

```{r team names}
#| output: false
#| echo: false
#| warning: false

team_map = df %>% 
  distinct(team_name_index, team_name) %>% 
  arrange(team_name_index)

teams_names = setNames(
  team_map$team_name,
  team_map$team_name_index
)
```

```{r att tbl}
#| output: false
#| echo: false
#| warning: false
att_tbl = as.data.frame(draws_of(draws$att)) %>%
  summarise(across(everything(), 
                   list(mean = ~mean(.),
                        `2.5%` = ~quantile(., 0.025),
                        median = ~median(.), 
                        `97.5%` = ~quantile(., 0.975)),
                   .names = "{.col}_{.fn}")) %>%
  pivot_longer(cols = everything(),
               names_to = c("Equipes", "Statistic"),
               names_sep = "_") %>%
  pivot_wider(names_from = Statistic, values_from = value) %>% 
  mutate(across(c(mean, `2.5%`, median, `97.5%`), \(x) round(x, 2)),
         "Equipes" = unname(teams_names)) %>% 
  rename("Média" = mean,
         "Mediana" = median) %>% 
  arrange(Equipes)
```

```{r def tbl}
#| output: false
#| echo: false
#| warning: false
def_tbl = as.data.frame(draws_of(draws$def)) %>%
  summarise(across(everything(), 
                   list(mean = ~mean(.),
                        `2.5%` = ~quantile(., 0.025),
                        median = ~median(.), 
                        `97.5%` = ~quantile(., 0.975)),
                   .names = "{.col}_{.fn}")) %>%
  pivot_longer(cols = everything(),
               names_to = c("Equipes", "Statistic"),
               names_sep = "_") %>%
  pivot_wider(names_from = Statistic, values_from = value) %>% 
  mutate(across(c(mean, `2.5%`, median, `97.5%`), \(x) round(x, 2)),
         "Equipes" = unname(teams_names)) %>% 
  rename("Média" = mean,
       "Mediana" = median) %>% 
  arrange(Equipes)
```

```{r home tbl}
#| output: false
#| echo: false
#| warning: false
home_tbl = as.data.frame(draws_of(draws$home)) %>%
  summarise(across(everything(), 
                   list(mean = ~mean(.),
                        `2.5%` = ~quantile(., 0.025),
                        median = ~median(.), 
                        `97.5%` = ~quantile(., 0.975)),
                   .names = "{.col}_{.fn}")) %>%
  pivot_longer(cols = everything(),
               names_to = c("Equipes", "Statistic"),
               names_sep = "_") %>%
  pivot_wider(names_from = Statistic, values_from = value) %>% 
  mutate(across(c(mean, `2.5%`, median, `97.5%`), \(x) round(x, 2)),
         "Equipes" = unname(teams_names)) %>% 
  rename("Média" = mean,
         "Mediana" = median) %>% 
  arrange(Equipes)
```

```{r boxplot att}
#| output: false
#| echo: false
#| warning: false

pbox_att = as.data.frame(t(draws_of(draws$att))) %>% 
  mutate("Equipes" = unname(teams_names)) %>% 
  pivot_longer(cols = -Equipes,
               names_to = c("draws")) %>% 
  select(-draws) %>%

ggplot(aes(x = value, y = reorder(Equipes, value))) +
  geom_boxplot(outlier.shape = NA, fill = "#004d8eff", color = "#0b5394ff") +
   stat_summary(
    fun = median,
    geom = "crossbar", 
    width = 1,
    color = "white",
    size = 0.3
  ) +
  labs(x = "Fator de Ataque",
       y = "Equipes",
       title = "Estimativas para o Fator de Ataque",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  xlim(-1.25, 1.25) +
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r plot att vs gols}
#| output: false
#| echo: false
#| warning: false

gf_df = df %>% 
  group_by(team_name) %>% 
  summarise(media = mean(gf))
ga_df = df %>% 
  group_by(opponent) %>% 
  summarise(media = mean(ga))

gols = gf_df %>%  
  left_join(ga_df, by = join_by(team_name == opponent)) %>% 
  mutate(media = (media.x + media.y)/2,
         att = att_tbl$Média) %>% 
  select(-media.x, -media.y)


patt = ggplot(gols, aes(x = att, y = media, label = team_name)) +
  geom_point(col = "black",
             size = 2) +
  geom_text_repel(
    aes(label = team_name),
    size = 3,
    min.segment.length = 0, 
    seed = 8
  ) +
  lims(x= c(-.5, .6)) +
  labs(x= "Fator Ataque",
       y= "Média de Gols Marcados",
       title = "Ataque vs Média de Gols Marcados",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r}
#| output: true
#| echo: false
#| warning: false

mcmc_areas(draws,
           pars = c("att[1]", "def[20]", "home[10]"),
           prob = 0.95) + ggtitle("Distribuições a Posteriori",
                                  "Mediana e Intervalo de Credibilidade 95%")
```


## Inferência

```{r plot def e att vs gols grid}
#| output: true
#| echo: false
#| warning: false

gridExtra::grid.arrange(pbox_att, patt, ncol = 2)
```



## Inferência

```{r boxplot def}
#| output: false
#| echo: false
#| warning: false


pbox_def = as.data.frame(t(draws_of(draws$def))) %>% 
  mutate("Equipes" = unname(teams_names)) %>% 
  pivot_longer(cols = -Equipes,
               names_to = c("draws")) %>% 
  select(-draws) %>% 

  ggplot(aes(x = value, y = reorder(Equipes, value))) +
    geom_boxplot(outlier.shape = NA, fill = "#004d8eff", color = "#0b5394ff") +
     stat_summary(
      fun = median,
      geom = "crossbar", 
      width = 1,
      color = "white",
      size = 0.3
    ) +
    labs(x= "Fator de Defesa",
         y= "Equipes",
         title = "Estimativas para o Fator de Defesa",
         subtitle = "Rodada 34 - Brasileirão Série 2024") +
    xlim(-1.25, 1.25) + 
    theme_minimal() +      
    theme(
      plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
      plot.subtitle = element_text(size = 10, hjust = 0.5),
      axis.title.x = element_text(size = 10, margin = margin(t = 10)),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r plot def vs gols}
#| output: false
#| echo: false
#| warning: false

gf_df = df %>% 
  group_by(team_name) %>% 
  summarise(media = mean(ga))
ga_df = df %>% 
  group_by(opponent) %>% 
  summarise(media = mean(gf))

gols = gf_df %>%  
  left_join(ga_df, by = join_by(team_name == opponent)) %>% 
  mutate(media = (media.x + media.y)/2,
         def = def_tbl$Média) %>% 
  select(-media.x, -media.y)


pdef = ggplot(gols, aes(x = def, y = media, label = team_name)) +
  geom_point(col = "black",
             size = 2) +
  geom_text_repel(
    size = 3,
    min.segment.length = 0.2, 
    seed = 42
  ) + 
  #geom_text(vjust= -1, size = 3) +
  lims(y= c(0.7, 1.7),
       x= c(-0.35, 0.5)) +
  labs(x= "Fator Defesa",
       y= "Média de Gols Sofridos",
       title = "Defesa vs Média de Gols Sofridos",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r plot def e att vs gols grid4}
#| output: true
#| echo: false
#| warning: false

gridExtra::grid.arrange(pbox_def, pdef, ncol = 2)
```



## Inferência

```{r boxplot home}
#| output: true
#| echo: false
#| warning: false


as.data.frame(t(draws_of(draws$home))) %>% 
  mutate("Equipes" = unname(teams_names)) %>% 
  pivot_longer(cols = -Equipes,
               names_to = c("draws")) %>% 
  select(-draws) %>% 

  ggplot(aes(x = value, y = reorder(Equipes, value))) +
    geom_boxplot(outlier.shape = NA, fill = "#004d8eff", color = "#0b5394ff") +
     stat_summary(
      fun = median,
      geom = "crossbar", 
      width = 1,
      color = "white",
      size = 0.3
    ) +
    labs(x= "Fator Casa",
         y= "Equipes",
         title = "Estimativas para o Fator Casa",
         subtitle = "Rodada 34 - Brasileirão Série 2024") +
    xlim(-1.5, 1.5) + 
    theme_minimal() +      
    theme(
      plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
      plot.subtitle = element_text(size = 10, hjust = 0.5),
      axis.title.x = element_text(size = 10, margin = margin(t = 10)),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 10, face = "italic")
    )
```



## Inferência


```{r att vs def}
#| output: true
#| echo: false
#| warning: false

tibble(team = att_tbl$Equipes, 
       att = att_tbl$Média, 
       def = def_tbl$Média) %>% 
  ggplot(aes(x = att, y = def, label = team)) +
  geom_point(col = "black",
             size = 2) +
  geom_text_repel(
    size = 3,
    nudge_x = .01,
    nudge_y = .03,
    seed = 42
  ) + 
  labs(x= "Fator Ataque",
       y= "Fator Defesa",
       title = "Ataque vs Defesa",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
  
```




## Predição

```{r config rep}
#| output: false
#| echo: false
#| warning: false

gf_rep = draws_of(draws$gf_new)#extract(fit1, "gf_new")$gf_new
gf_obs = df_test$gf

ga_rep = draws_of(draws$ga_new)#extract(fit1, "ga_new")$ga_new
ga_obs = df_test$ga
```

```{r plot dist preditiva}
#| output: true
#| echo: false
#| warning: false

pgf = ppc_bars(gf_obs, gf_rep)
pga = ppc_bars(ga_obs, ga_rep)

bayesplot_grid(plots = list(pgf, pga),
               titles = c("Gols Mandante", "Gols Visitante"))
```



## Predição

```{r plot dist preditiva media}
#| output: true
#| echo: false
#| warning: false

pgf_mean = ppc_stat(gf_obs, gf_rep, stat = "mean")
pga_mean =ppc_stat(ga_obs, ga_rep, stat = "mean")

bayesplot_grid(plots = list(pgf_mean, pga_mean),
               titles = c("Gols Mandante", "Gols Visitante"))
```



## Predição

```{r prob sp vs galo}
#| output: true
#| echo: false
#| warning: false

prob_game = predict_game(11, 0:3, draws)

prob_game_long <- as.data.frame(prob_game) %>%
  mutate(Row = rownames(prob_game)) %>%
  pivot_longer(-Row, names_to = "Column", values_to = "Value")

ggplot(prob_game_long, aes(y = Column, x = Row, fill = Value)) +
  geom_tile(color = "white") +  # Creates the heatmap
  geom_text(aes(label = sprintf("%.1f%%", Value)), color = "white") +  # Add percentage text
  scale_fill_gradient(low = "#3d85c6ff", high = "#073763ff") +  # Gradient color
  labs(
    title = "São Paulo (2) vs (2) Atlético Mineiro",
    subtitle = "Brasileirão Série A - Rodada 35",
    x = "São Paulo",
    y = "Atlético Mineiro"
  ) +
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10)
    ) + 
  coord_flip() +
  guides(fill = FALSE)
```



## Predição

```{r df_predicted}
#| output: false
#| echo: false
#| warning: false

df_predicted = predict_league(df_test, draws)

predictive_likelihood_1 = df_predicted %>%
  mutate(observed_probability = case_when(
    sucess == 1 & result == "W" ~ home_win,
    sucess == 1 & result == "D" ~ draw,
    sucess == 1 & result == "L" ~ home_lost,
    TRUE ~ NA_real_
  )) %>% 
  filter(sucess == 1) %>%
  summarise(likelihood = prod(observed_probability, na.rm = TRUE)) %>%
  pull(likelihood)
```

```{r predictions df}
#| output: false
#| echo: false
#| warning: false

predictions = df_predicted %>% 
  filter(round == 35)

game_names = paste(predictions$team_name, "X", predictions$opponent)
predictions['game_id'] = as.factor(1:nrow(predictions))
predictions['game_name'] = game_names

predictions = predictions %>% 
  select(game_id, game_name, team_name, opponent, home_win, draw, home_lost, gf, ga) %>% 
  mutate(result = paste0(gf, " - ", ga))
```

```{r table pred probs}
#| output: true
#| echo: false
#| warning: false
#| tbl-cap: "Probabilidades para a rodada 35 do Brasileirão Série A"

predictions %>% 
  mutate_at(c("home_win", "draw", "home_lost"), ~.*100) %>% 
  mutate_at(c("home_win", "draw", "home_lost"), ~round(., 1)) %>% 
  mutate_at(c("home_win", "draw", "home_lost"), ~paste0(.,"%")) %>% 
  select(
    "Partida" = game_name, 
    "Resultado" = result,
    "Vitória Mandante" = home_win, 
    "Empate" = draw, 
    "Vitória Visitante" = home_lost) %>% 
  kbl() %>%
  kable_styling(bootstrap_options = c("striped")) %>% 
  column_spec(1, width = "35em") %>% 
  column_spec(2, bold = T) %>% 
  column_spec(3, width = "5em") %>% 
  column_spec(4, width = "5em") %>% 
  column_spec(5, width = "5em")
```

```{r}
#| output: false
#| echo: false
#| warning: false

expected_result = df_predicted %>%
  group_by(result) %>%
  summarise(real_freq = n())

expected_result <- expected_result %>%
  mutate(expected_freq = case_when(
    result == "W" ~ round(sum(df_predicted$home_win),2),
    result == "D" ~ round(sum(df_predicted$draw),2),
    result == "L" ~ round(sum(df_predicted$home_lost),2),
    TRUE ~ NA_real_
))

colnames(expected_result) <- c("Resultado", "Freqência", "Frequência Esperada")

expected1 = expected_result
```

# Modelo 2: Dinâmico

## Modelagem

Com base no modelo estático apresentado anteriormente, considere $r$ como a rodada em que a partida está sendo disputada $(r = 1, ..., R)$. O modelo assume: 

$$ X_{i,j}^{r} \mid \theta \sim \text{Poisson}(\theta_{i,j}^{r}) \\
Y_{j,i}^{r} \mid \theta \sim \text{Poisson}(\theta_{j,i}^{r}) $$

Com as parametrizações:

$$ \log(\theta_{i,j}^{r}) = att_i^r - def_j^r + home_i^r \\
\log(\theta_{j,i}^{r}) = att_j^r - def_i^r $$



## Modelagem

Os fatores em cada rodada seguem um modelo auto-regressivo de ordem 1:

$$ att_t^r =  att_{t}^{r-1} + \omega_{att}^{r} \\
def_t^r =  def_{t}^{r-1} + \omega_{def}^{r} \\
home_t^r =  home_{t}^{r-1} + \omega_{home}^{r} $$

Os termos $\omega$ representam perturbações periódicas nos valores dos parâmetros e são distribuídos como:

$$ 
\omega_{att}^{r} \sim \text{Normal}(0, \sigma^2) \\ 
\omega_{def}^{r} \sim \text{Normal}(0, \sigma^2) \\ 
\omega_{home}^{r} \sim \text{Normal}(0, \sigma^2)
$$

## Modelagem

Assim, temos:

$$ att_t^r \sim \text{Normal}(att_t^{r-1}, \sigma^2) \\
def_t^r \sim \text{Normal}(def_t^{r-1}, \sigma^2) \\
home_t^r \sim \text{Normal}(home_t^{r-1}, \sigma^2) $$

Para $r = 1$, as distribuições iniciais são:

$$ att_t^1 \sim \text{Normal}(0, \sigma^2) \\
def_t^1 \sim \text{Normal}(0, \sigma^2) \\
home_t^1 \sim \text{Normal}(0, \sigma^2) $$

Os hiperparâmetros foram modelados com as seguintes prioris:

$$
\sigma \sim \text{Half-Cauchy}(0, 25)
$$

## Modelagem

Mantemos as seguintes restrições nos parâmetros:

$$\sum_{t=1}^{T} att_t^{r} = 0 \quad 
\sum_{t=1}^{T} def_t^{r} = 0, \quad 
\sum_{t=1}^{T} home_t^{r} = 0$$

O vetor de parâmetros $\theta$ agora contém um total de 2281 elementos:

$$\theta = (att_{1}^1, ..., att_{T}^R, def_{1}^1, ..., def_{T}^R, home_{1}^1, ..., home_{T}^R, \sigma^2)$$

## Convergencia

Foram executadas 4000 iterações, sendo 2000 "burn-in".

```{r traceplot1}
#| output: true
#| echo: false
#| warning: false

draws = posterior::as_draws_rvars(fit2$draws())

p1 = mcmc_trace(draws, pars = c("att[1,1]")) + ylab("Att Botafogo (R=1)")
p2 = mcmc_trace(draws, pars = c("def[20,2]")) + ylab("Def Palmeiras (R=20)")
p3 = mcmc_trace(draws, pars = c("home[1,2]")) + ylab("Home Palmeiras (R=1)")
p4 = mcmc_trace(draws, pars = c("home[5,1]")) + ylab("Home Botafogo (R=5)")

bayesplot_grid(plots = list(p1, p2, p3, p4))
```



## Convergência

```{r rhat and neff1}
#| output: true
#| echo: false
#| warning: false

rhats = bayesplot::rhat(fit2)
ratios_cp = neff_ratio(fit2)

prhat = mcmc_rhat_hist(rhats)
pnepp = mcmc_neff_hist(ratios_cp)

bayesplot_grid(plots = list(prhat, pnepp))
```



## Convergência

```{r acf1}
#| output: true
#| echo: false
#| warning: false

pacf1 = mcmc_acf(draws, pars = c("att[1,1]")) + ylab("Att Botafogo (R=1)")
pacf2 = mcmc_acf(draws, pars = c("def[24,2]")) + ylab("Def Palmeiras (R=24)")

bayesplot_grid(plots = list(pacf1, pacf2),
               grid_args = list(nrow = 1, ncol = 2))
```



## Inferência

```{r att tbl1}
#| output: false
#| echo: false
#| warning: false
att_tbl = as.data.frame(draws_of(draws$att)[,34,]) %>%
  summarise(across(everything(), 
                   list(mean = ~mean(.),
                        `2.5%` = ~quantile(., 0.025),
                        median = ~median(.), 
                        `97.5%` = ~quantile(., 0.975)),
                   .names = "{.col}_{.fn}")) %>%
  pivot_longer(cols = everything(),
               names_to = c("Equipes", "Statistic"),
               names_sep = "_") %>%
  pivot_wider(names_from = Statistic, values_from = value) %>% 
  mutate(across(c(mean, `2.5%`, median, `97.5%`), \(x) round(x, 2)),
         "Equipes" = unname(teams_names)) %>% 
  rename("Média" = mean,
         "Mediana" = median) %>% 
  arrange(Equipes)
```

```{r def tbl1}
#| output: false
#| echo: false
#| warning: false
def_tbl = as.data.frame(draws_of(draws$def)[,34,]) %>%
  summarise(across(everything(), 
                   list(mean = ~mean(.),
                        `2.5%` = ~quantile(., 0.025),
                        median = ~median(.), 
                        `97.5%` = ~quantile(., 0.975)),
                   .names = "{.col}_{.fn}")) %>%
  pivot_longer(cols = everything(),
               names_to = c("Equipes", "Statistic"),
               names_sep = "_") %>%
  pivot_wider(names_from = Statistic, values_from = value) %>% 
  mutate(across(c(mean, `2.5%`, median, `97.5%`), \(x) round(x, 2)),
         "Equipes" = unname(teams_names)) %>% 
  rename("Média" = mean,
       "Mediana" = median) %>% 
  arrange(Equipes)
```

```{r home tbl1}
#| output: false
#| echo: false
#| warning: false
home_tbl = as.data.frame(draws_of(draws$home)[,34,]) %>%
  summarise(across(everything(), 
                   list(mean = ~mean(.),
                        `2.5%` = ~quantile(., 0.025),
                        median = ~median(.), 
                        `97.5%` = ~quantile(., 0.975)),
                   .names = "{.col}_{.fn}")) %>%
  pivot_longer(cols = everything(),
               names_to = c("Equipes", "Statistic"),
               names_sep = "_") %>%
  pivot_wider(names_from = Statistic, values_from = value) %>% 
  mutate(across(c(mean, `2.5%`, median, `97.5%`), \(x) round(x, 2)),
         "Equipes" = unname(teams_names)) %>% 
  rename("Média" = mean,
         "Mediana" = median) %>% 
  arrange(Equipes)
```

```{r boxplot att1}
#| output: false
#| echo: false
#| warning: false

pbox_att = as.data.frame(t(draws_of(draws$att)[,34,])) %>% 
  mutate("Equipes" = unname(teams_names)) %>% 
  pivot_longer(cols = -Equipes,
               names_to = c("draws")) %>% 
  select(-draws) %>%

ggplot(aes(x = value, y = reorder(Equipes, value))) +
  geom_boxplot(outlier.shape = NA, fill = "#004d8eff", color = "#0b5394ff") +
   stat_summary(
    fun = median,
    geom = "crossbar", 
    width = 1,
    color = "white",
    size = 0.3
  ) +
  labs(x = "Fator de Ataque",
       y = "Equipes",
       title = "Estimativas para o Fator de Ataque",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  xlim(-1.25, 1.25) +
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r plot att vs gols1}
#| output: false
#| echo: false
#| warning: false

gf_df = df %>% 
  group_by(team_name) %>% 
  summarise(media = mean(gf))
ga_df = df %>% 
  group_by(opponent) %>% 
  summarise(media = mean(ga))

gols = gf_df %>%  
  left_join(ga_df, by = join_by(team_name == opponent)) %>% 
  mutate(media = (media.x + media.y)/2,
         att = att_tbl$Média) %>% 
  select(-media.x, -media.y)


patt = ggplot(gols, aes(x = att, y = media, label = team_name)) +
  geom_point(col = "black",
             size = 2) +
  geom_text_repel(
    aes(label = team_name),
    size = 3,
    min.segment.length = 0, 
    seed = 8
  ) +
  lims(x= c(-.5, .6)) +
  labs(x= "Fator Ataque",
       y= "Média de Gols Marcados",
       title = "Ataque vs Média de Gols Marcados",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r}
#| output: true
#| echo: false
#| warning: false

mcmc_areas(draws,
           pars = c("att[1,1]", "def[5,20]", "home[25,10]"),
           prob = 0.95) + ggtitle("Distribuições a Posteriori",
                                  "Mediana e Intervalo de Credibilidade 95%")
```

## Inferênica

```{r plot def e att vs gols grid1}
#| output: true
#| echo: false
#| warning: false

gridExtra::grid.arrange(pbox_att, patt, ncol = 2)
```



## Inferência

```{r boxplot def1}
#| output: false
#| echo: false
#| warning: false


pbox_def = as.data.frame(t(draws_of(draws$def)[,34,])) %>% 
  mutate("Equipes" = unname(teams_names)) %>% 
  pivot_longer(cols = -Equipes,
               names_to = c("draws")) %>% 
  select(-draws) %>% 

  ggplot(aes(x = value, y = reorder(Equipes, value))) +
    geom_boxplot(outlier.shape = NA, fill = "#004d8eff", color = "#0b5394ff") +
     stat_summary(
      fun = median,
      geom = "crossbar", 
      width = 1,
      color = "white",
      size = 0.3
    ) +
    labs(x= "Fator de Defesa",
         y= "Equipes",
         title = "Estimativas para o Fator de Defesa",
         subtitle = "Rodada 34 - Brasileirão Série 2024") +
    xlim(-1.25, 1.25) + 
    theme_minimal() +      
    theme(
      plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
      plot.subtitle = element_text(size = 10, hjust = 0.5),
      axis.title.x = element_text(size = 10, margin = margin(t = 10)),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r plot def vs gols1}
#| output: false
#| echo: false
#| warning: false

gf_df = df %>% 
  group_by(team_name) %>% 
  summarise(media = mean(ga))
ga_df = df %>% 
  group_by(opponent) %>% 
  summarise(media = mean(gf))

gols = gf_df %>%  
  left_join(ga_df, by = join_by(team_name == opponent)) %>% 
  mutate(media = (media.x + media.y)/2,
         def = def_tbl$Média) %>% 
  select(-media.x, -media.y)


pdef = ggplot(gols, aes(x = def, y = media, label = team_name)) +
  geom_point(col = "black",
             size = 2) +
  geom_text_repel(
    size = 3,
    min.segment.length = 0.2, 
    seed = 42
  ) + 
  #geom_text(vjust= -1, size = 3) +
  lims(y= c(0.7, 1.7),
       x= c(-0.35, 0.5)) +
  labs(x= "Fator Defesa",
       y= "Média de Gols Sofridos",
       title = "Defesa vs Média de Gols Sofridos",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
```

```{r plot def e att vs gols grid2}
#| output: true
#| echo: false
#| warning: false

gridExtra::grid.arrange(pbox_def, pdef, ncol = 2)
```



## Inferência

```{r boxplot home1}
#| output: true
#| echo: false
#| warning: false


as.data.frame(t(draws_of(draws$home)[,34,])) %>% 
  mutate("Equipes" = unname(teams_names)) %>% 
  pivot_longer(cols = -Equipes,
               names_to = c("draws")) %>% 
  select(-draws) %>% 

  ggplot(aes(x = value, y = reorder(Equipes, value))) +
    geom_boxplot(outlier.shape = NA, fill = "#004d8eff", color = "#0b5394ff") +
     stat_summary(
      fun = median,
      geom = "crossbar", 
      width = 1,
      color = "white",
      size = 0.3
    ) +
    labs(x= "Fator Casa",
         y= "Equipes",
         title = "Estimativas para o Fator Casa",
         subtitle = "Rodada 34 - Brasileirão Série 2024") +
    xlim(-1.25, 1.25) + 
    theme_minimal() +      
    theme(
      plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
      plot.subtitle = element_text(size = 10, hjust = 0.5),
      axis.title.x = element_text(size = 10, margin = margin(t = 10)),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 10, face = "italic")
    )
```



## Inferência


```{r att vs def1}
#| output: true
#| echo: false
#| warning: false

tibble(team = att_tbl$Equipes, 
       att = att_tbl$Média, 
       def = def_tbl$Média) %>% 
  ggplot(aes(x = att, y = def, label = team)) +
  geom_point(col = "black",
             size = 2) +
  geom_text_repel(
    size = 3,
    nudge_x = .01,
    nudge_y = .01,
    seed = 42
  ) + 
  labs(x= "Fator Ataque",
       y= "Fator Defesa",
       title = "Ataque vs Defesa",
       subtitle = "Rodada 34 - Brasileirão Série 2024") + 
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
    )
  
```



## Predição

```{r config rep1}
#| output: false
#| echo: false
#| warning: false

gf_rep = draws_of(draws$gf_new)#extract(fit1, "gf_new")$gf_new
gf_obs = df_test$gf

ga_rep = draws_of(draws$ga_new)#extract(fit1, "ga_new")$ga_new
ga_obs = df_test$ga
```

```{r plot dist preditiva1}
#| output: true
#| echo: false
#| warning: false

pgf = ppc_bars(gf_obs, gf_rep)
pga = ppc_bars(ga_obs, ga_rep)

bayesplot_grid(plots = list(pgf, pga),
               titles = c("Gols Mandante", "Gols Visitante"))
```



## Predição

```{r plot dist preditiva media1}
#| output: true
#| echo: false
#| warning: false

pgf_mean = ppc_stat(gf_obs, gf_rep, stat = "mean")
pga_mean =ppc_stat(ga_obs, ga_rep, stat = "mean")

bayesplot_grid(plots = list(pgf_mean, pga_mean),
               titles = c("Gols Mandante", "Gols Visitante"))
```



## Predição

```{r prob sp vs galo1}
#| output: true
#| echo: false
#| warning: false

prob_game = predict_game(11, 0:3, draws)

prob_game_long <- as.data.frame(prob_game) %>%
  mutate(Row = rownames(prob_game)) %>%
  pivot_longer(-Row, names_to = "Column", values_to = "Value")

ggplot(prob_game_long, aes(y = Column, x = Row, fill = Value)) +
  geom_tile(color = "white") +  # Creates the heatmap
  geom_text(aes(label = sprintf("%.1f%%", Value)), color = "white") +  # Add percentage text
  scale_fill_gradient(low = "#3d85c6ff", high = "#073763ff") +  # Gradient color
  labs(
    title = "São Paulo (2) vs (2) Atlético Mineiro",
    subtitle = "Brasileirão Série A - Rodada 35",
    x = "São Paulo",
    y = "Atlético Mineiro"
  ) +
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10)
    ) + 
  coord_flip() +
  guides(fill = FALSE)
```



## Predição

```{r df_predicted1}
#| output: false
#| echo: false
#| warning: false

df_predicted = predict_league(df_test, draws)

predictive_likelihood_2 = df_predicted %>%
  mutate(observed_probability = case_when(
    sucess == 1 & result == "W" ~ home_win,
    sucess == 1 & result == "D" ~ draw,
    sucess == 1 & result == "L" ~ home_lost,
    TRUE ~ NA_real_
  )) %>% 
  filter(sucess == 1) %>%
  summarise(likelihood = prod(observed_probability, na.rm = TRUE)) %>%
  pull(likelihood)
```

```{r predictions df1}
#| output: false
#| echo: false
#| warning: false

predictions = df_predicted %>% 
  filter(round == 35)

game_names = paste(predictions$team_name, "X", predictions$opponent)
predictions['game_id'] = as.factor(1:nrow(predictions))
predictions['game_name'] = game_names

predictions = predictions %>% 
  select(game_id, game_name, team_name, opponent, home_win, draw, home_lost, gf, ga) %>% 
  mutate(result = paste0(gf, " - ", ga))
```

```{r table pred probs1}
#| output: true
#| echo: false
#| warning: false
#| tbl-cap: "Probabilidades para a rodada 35 do Brasileirão Série A"

predictions %>% 
  mutate_at(c("home_win", "draw", "home_lost"), ~.*100) %>% 
  mutate_at(c("home_win", "draw", "home_lost"), ~round(., 1)) %>% 
  mutate_at(c("home_win", "draw", "home_lost"), ~paste0(.,"%")) %>% 
  select(
    "Partida" = game_name, 
    "Resultado" = result,
    "Vitória Mandante" = home_win, 
    "Empate" = draw, 
    "Vitória Visitante" = home_lost) %>% 
  kbl() %>%
  kable_styling(bootstrap_options = c("striped")) %>% 
  column_spec(1, width = "35em") %>% 
  column_spec(2, bold = T) %>% 
  column_spec(3, width = "5em") %>% 
  column_spec(4, width = "5em") %>% 
  column_spec(5, width = "5em")
```



## Predição


```{r}
#| output: false
#| echo: false
#| warning: false

times_escolhidos = c("Botafogo (RJ)", "Atlético Mineiro", "Cruzeiro", "Palmeiras", "Atlético Goianiense")

team_att <- draws_of(draws$att) %>%
  apply(c(2, 3), mean) %>%
  as.data.frame.table() %>%
  rename(Round = Var1, Team = Var2, Mean = Freq) %>%
  mutate(
    Round = as.numeric(Round),
    Team = teams_names[as.numeric(Team)],
    group = if_else(Team %in% times_escolhidos, Team, "other"),
    group = as.factor(group)
  ) %>% 
  mutate(
    group = fct_relevel(group, "other", after = Inf)
  )

pteam_att = ggplot(
  team_att %>% filter(group != "other"), 
  aes(x = Round, y = Mean, group = Team)) +
  geom_line(
    data = team_att %>% filter(group == "other"), 
    color = "grey75",
    size = .6,
    alpha = .5
  ) +
  geom_line(
    aes(color = group),
    size = .9
  ) + 
  labs(
    title = "Fator Ataque ao Longo das Rodadas",
    subtitle = "Brasileirão Série A",
    x = "Rodadas",
    y = "Fator Ataque",
    color = "Equipes"
  ) +
  scale_color_manual(values = c("Botafogo (RJ)" = "black",
                                "Atlético Mineiro" = "gold",
                                "Cruzeiro" = "darkblue",
                                "Palmeiras" = "#20b06f",
                                "Atlético Goianiense" = "red4")
                     ) +
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
  )
```


```{r}
#| output: false
#| echo: false
#| warning: false

team_def <- draws_of(draws$def) %>%
  apply(c(2, 3), mean) %>%
  as.data.frame.table() %>%
  rename(Round = Var1, Team = Var2, Mean = Freq) %>%
  mutate(
    Round = as.numeric(Round),
    Team = teams_names[as.numeric(Team)],
    group = if_else(Team %in% times_escolhidos, Team, "other"),
    group = as.factor(group)
  ) %>% 
  mutate(
    group = fct_relevel(group, "other", after = Inf)
  )

pteam_def = ggplot(
  team_def %>% filter(group != "other"), 
  aes(x = Round, y = Mean, group = Team)) +
  geom_line(
    data = team_att %>% filter(group == "other"), 
    color = "grey75",
    size = .6,
    alpha = .5
  ) +
  geom_line(
    aes(color = group),
    size = .9
  ) + 
  labs(
    title = "Fator Defesa ao Longo das Rodadas",
    subtitle = "Brasileirão Série A",
    x = "Rodadas",
    y = "Fator Defesa",
    color = "Equipes"
  ) +
  scale_color_manual(values = c("Botafogo (RJ)" = "black",
                                "Atlético Mineiro" = "gold",
                                "Cruzeiro" = "darkblue",
                                "Palmeiras" = "#20b06f",
                                "Atlético Goianiense" = "red4")
                     ) +
  theme_minimal() +      
  theme(
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title.x = element_text(size = 10, margin = margin(t = 10)),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "italic")
  )
```

```{r}
#| output: true
#| echo: false
#| warning: false

pteam_att
```
## Predição

```{r}
#| output: true
#| echo: false
#| warning: false

pteam_def
```


# Conclusão

```{r}
#| output: true
#| echo: false
#| warning: false
#| tbl-cap: "Estático"

kbl(expected1)
```

```{r}
#| output: true
#| echo: false
#| warning: false
#| tbl-cap: "Dinâmico"

expected_result = df_predicted %>%
  group_by(result) %>%
  summarise(real_freq = n())

expected_result <- expected_result %>%
  mutate(expected_freq = case_when(
    result == "W" ~ round(sum(df_predicted$home_win),2),
    result == "D" ~ round(sum(df_predicted$draw),2),
    result == "L" ~ round(sum(df_predicted$home_lost),2),
    TRUE ~ NA_real_
))

colnames(expected_result) <- c("Resultado", "Freqência", "Frequência Esperada")

expected2 = expected_result
kbl(expected2)
```

```{r}
#| output: true
#| echo: false
#| warning: false
#| tbl-cap: "Verossimilhança Preditiva"

tbl_pred = tibble(
  "Estático" = predictive_likelihood_1,
  "Dinâmico" = 7.23e-05#predictive_likelihood_2
)

kbl(tbl_pred)
```

