
# SETUP

```{r setup}
library(tidyverse)
library(cmdstanr)
library(posterior)
library(bayesplot)

library(FootStats)
```

```{r loading df}
brasileirao_a_raw = FootStats::load_data('brazil', 'brasileirao_a')
#premier_league_raw = FootStats::load_data('england', 'premier_league')
```

```{r only home view}
brasileirao_a = brasileirao_a_raw %>% 
  filter(venue == 'Home')

# premier_league = premier_league_raw %>% 
#   filter(venue == 'Home')
```

```{r train test}
#BRASILEIRAO
br_train_test = FootStats::split_train_test(brasileirao_a_raw, '2024', 35)

br_train = br_train_test$train
br_test = br_train_test$test

br = rbind(br_train, br_test)

#PREMIER LEAGUE
# pl_train_test = FootStats::split_train_test(premier_league_raw, '2023', 35)
# 
# pl_train = pl_train_test$train
# pl_test = pl_train_test$test
# 
# pl = rbind(br_train, br_test)
```

# DESCRITIVA

```{r dados descritiva}
df_descritiva = rbind(brasileirao_a, premier_league) %>% 
  select(
    "Gols mandante" = gf,
    "Gols visitante" = ga,
    "Campeonato" = comp
    ) %>% 
  pivot_longer(
    cols = c(`Gols mandante`, `Gols visitante`),
    names_to = "gols"
    )
```

```{r distribuicao}
ggplot(df_descritiva, aes(x = value)) +
  geom_bar() +
  facet_grid(Campeonato ~ gols) +
  labs(
    title = "Distribuição dos Gols",
    subtitle = "Brasileirão Série A vs. Premier League - Temporadas 2019 à 2024",
    x = "Número de gols",
    y = "Frequência"
  ) +
  theme_minimal()
```

```{r estatisticas}
df_descritiva %>% 
  group_by(Campeonato, gols) %>% 
  reframe(
    media = mean(value, na.rm=TRUE),
    mediana = median(value, na.rm=TRUE),
    desvio_padrao = sd(value, na.rm=TRUE)
  )
```

```{r placares}
rbind(brasileirao_a, premier_league) |> 
  mutate(placar = paste0(gf, "x", ga)) %>% 
  group_by(placar, comp) %>% 
  count(placar) %>%
  ungroup() %>% 
  mutate(
    pct = round((n / sum(n)) * 100, 1)
  ) %>% 
  mutate(
      category = case_when(
        str_detect(placar, "0x0") ~ "0x0",
        str_detect(placar, "0") ~ "Contém 0",
        TRUE ~ "Outro"
      )
    ) %>% 
  filter(category != "Outro") %>% 
  group_by(category, comp) %>% 
  summarise(
    pct = sum(pct),
    n = sum(n),
    .groups = "drop"
  )
```

```{r resultados}
rbind(brasileirao_a, premier_league) |> 
  group_by(comp) |> 
  count(result) %>% 
  filter(result %in% c("W", "D", "L")) %>%
  mutate(pct = round((n / sum(n)) * 100, 1),
         result = case_when(
           result == "D" ~ "Empate",
           result == "L" ~ "Visitante",
           result == "W" ~ "Mandante",
           TRUE ~ "Outro"
         ))
```

# MODELAGEM

```{r settings stan}
#BRASILEIRAO
data_br = list(
  #treino
  nteams = length(unique(br_train$team_name_idx)),
  ngames = nrow(br_train),
  team1 = br_train$team_name_idx,
  team2 = br_train$opponent_idx,
  gf = br_train$gf,
  ga = br_train$ga,
  #test
  ngames_new = nrow(br_test),
  team1_new = br_test$team_name_idx,
  team2_new = br_test$opponent_idx
)
#PREMIER LEAGUE
# data_pl = list(
#   #treino
#   nteams = length(unique(pl_train$team_name_idx)),
#   ngames = nrow(pl_train),
#   team1 = pl_train$team_name_idx,
#   team2 = pl_train$opponent_idx,
#   gf = as.integer(pl_train$gf),
#   ga = as.integer(pl_train$ga),
#   #test
#   ngames_new = nrow(pl_test),
#   team1_new = pl_test$team_name_idx,
#   team2_new = pl_test$opponent_idx
# )

iter = 2500
warmup = 2500
chains = 4
cores = 8
```

```{r fit 1_poisson_indep}
indep_pois = cmdstan_model("models/1_indep_poisson.stan")

fit_indep_pois = indep_pois$sample(
                   data = data_br,
                   iter_sampling = iter,
                   iter_warmup = warmup,
                   chains = chains,
                   parallel_chains = cores,
                   #max_treedepth = 15,
                 )

fit_indep_pois$save_object(file = "results/1_indep_poisson(br).rds")
```

```{r}
library("shinystan")
launch_shinystan(fit_indep_pois)
```

```{r}
y1_rep = fit1$draws("gf_new")
y1_obs = df_test$gf

y2_rep = fit1$draws("ga_new")
y2_obs = df_test$ga

z_rep = y1_rep - y2_rep
z_obs = y1_obs - y2_obs
```

```{r}
ppc_bars(y1_obs, y1_rep)
ppc_bars(y2_obs, y2_rep)
ppc_bars(z_obs, z_rep)
```

