
# SETUP

```{r setup}
library(tidyverse)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(shinystan)
library(FootStats)
```

```{r loading df}
brasileirao_a_raw = FootStats::load_data('brazil', 'brasileirao_a')
premier_league_raw = FootStats::load_data('england', 'premier_league')
```

```{r only home view}
brasileirao_a = brasileirao_a_raw %>% 
  filter(venue == 'Home')

premier_league = premier_league_raw %>% 
  filter(venue == 'Home')
```

```{r train test}
#BRASILEIRAO
br_train_test = FootStats::split_train_test(brasileirao_a_raw, '2024', 35)

br_train = br_train_test$train
br_test = br_train_test$test

br = rbind(br_train, br_test)

#BRASILEIRAO COVARIAVEL
br_train_test_co = FootStats::split_train_test(brasileirao_a_raw, '2024', 35, ('2023'))

br_train_co = br_train_test_co$train |> mutate(season = factor(season))
br_test_co = br_train_test_co$test

br_co = rbind(br_train_co, br_test_co)

#PREMIER LEAGUE
pl_train_test = FootStats::split_train_test(premier_league_raw, '2023', 35)

pl_train = pl_train_test$train
pl_test = pl_train_test$test

pl = rbind(pl_train, pl_test)

#GENERATED
num_teams = 20
model = "poisson"
params = list("intercept" = 1, "home" = .5, "sd_att" = 1, "sd_def" = 1)

gen_data = FootStats::generate_data(num_teams, model, params)
```

# MODELAGEM

```{r settings stan}
#BRASILEIRAO
data_br = list(
  #treino
  nteams = length(unique(br_train_co$team_name_idx)),
  ngames = nrow(br_train_co),
  team1 = br_train_co$team_name_idx,
  team2 = br_train_co$opponent_idx,
  gf = br_train_co$gf,
  ga = br_train_co$ga,
  #test
  ngames_new = nrow(br_test),
  team1_new = br_test$team_name_idx,
  team2_new = br_test$opponent_idx
)
#BRASILEIRAO COVARIAVEL


X = model.matrix(~ 0+season, data = br_train_co)
X_new = model.matrix(~ 0+factor(season, levels = levels(br_train_co$season)), data = br_test_co)

data_br_co = list(
  #treino
  nteams = length(unique(br_train_co$team_name_idx)),
  ngames = nrow(br_train_co),
  team1 = br_train_co$team_name_idx,
  team2 = br_train_co$opponent_idx,
  gf = br_train_co$gf,
  ga = br_train_co$ga,
  X = X,
  ncol_X = ncol(X),
  #test
  ngames_new = nrow(br_test_co),
  team1_new = br_test_co$team_name_idx,
  team2_new = br_test_co$opponent_idx,
  Xnew = X_new,
  ncol_Xnew = ncol(X_new)
)
#PREMIER LEAGUE
data_pl = list(
  #treino
  nteams = length(unique(pl_train$team_name_idx)),
  ngames = nrow(pl_train),
  team1 = pl_train$team_name_idx,
  team2 = pl_train$opponent_idx,
  gf = as.integer(pl_train$gf),
  ga = as.integer(pl_train$ga),
  #test
  ngames_new = nrow(pl_test),
  team1_new = pl_test$team_name_idx,
  team2_new = pl_test$opponent_idx
)

#GEN
data_gen = list(
  #treino
  nteams = length(unique(gen_data$data$home_index)),
  ngames = nrow(gen_data$data),
  team1 = gen_data$data$home_index,
  team2 = gen_data$data$away_index,
  gf = gen_data$data$goals_home,
  ga = gen_data$data$goals_away,
  #test
  ngames_new = nrow(gen_data$data),
  team1_new = gen_data$data$home_index,
  team2_new = gen_data$data$away_index
)

iter = 2500
warmup = 2500
chains = 4
cores = 8
```

```{r fit 1_poisson_indep}
indep_pois = cmdstan_model("models/indep_poisson.stan")

fit = indep_pois$sample(
                   data = data_pl,
                   iter_sampling = iter,
                   iter_warmup = warmup,
                   chains = chains,
                   parallel_chains = cores,
                   max_treedepth = 15,
                 )

fit$save_object(file = "results/indep_poisson(pl).rds")
```

```{r}
fit_br = readRDS("results/indep_poisson(br).rds")
fit_br_co = readRDS("results/indep_poisson(br_co).rds")
fit_pl = readRDS("results/indep_poisson(pl).rds")
```

# CONVERGENCIA

```{r}
launch_shinystan(fit)
```

```{r}
fit$summary()
```


# PREDICAO

```{r}
draws_br = posterior::as_draws_rvars(fit_br$draws())
draws_br_co = posterior::as_draws_rvars(fit_br_co$draws())
draws_pl = posterior::as_draws_rvars(fit_pl$draws())
#draws_of(draws$def)
```

```{r}
predicted_br = FootStats::predict(br_test, draws_br)
predicted_br_co = FootStats::predict(br_test_co, draws_br_co)
predicted_pl = FootStats::predict(pl_test, draws_pl)
```

```{r}
writexl::write_xlsx(predicted_br, 'data/poisson_br.xlsx')
writexl::write_xlsx(predicted_br_co, 'data/poisson_br_co.xlsx')
writexl::write_xlsx(predicted_pl, 'data/poisson_pl.xlsx')
```

